@using BlazorAppWithJSONSerialization;
@using System.Text;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Text.RegularExpressions;
@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <button title="Serialize Data" class="btn btn-primary" @onclick="SerializeData">Serialize Data</button>
    @((MarkupString)codeLines)
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    private string codeLines = "";

    private void SerializeData()
    {
        StringBuilder bc = new("<div class=\"serialized-code\"><code>");
        var serialized = JsonSerializer.Serialize(forecasts);
        bool first = true;
        foreach (var line in Regex.Split(serialized, "\n\r|\n|\r"))
        {
            if (first)
                first = false;
            else
                bc.Append("<br/>");

            bc.Append(line);
        }

        bc.Append("</code></div>");
        codeLines = bc.ToString();
    }
}
